#!/usr/bin/env bash

tracefs="/sys/kernel/debug/tracing"

err() {
    echo "$@"
    exit 1
}

do_run() {
    if ! eval "$@"; then
        err "WARNING: command failed \"$*\""
    fi
}

join() {
    local IFS="$1"
    shift
    echo "$*"
}

get_addr() {
    local bin="$1"
    local sym="$2"
    local addr
    addr=$(objdump -tT "${bin}" | awk -v sym="${sym}" '$NF == sym && $4 == ".text" {print $1;exit}')
    [[ "$addr" == "" ]] && err "missing sym: ${bin}:${sym}"
    [[ 0x$addr == 0 ]] && err "failed resolve: ${bin}:${sym}"
    addr=0x$(printf "%x" 0x$addr)
    echo "$addr"
}

post_hooks=()
atexit() {
    for ((i = ${#post_hooks[@]} - 1; i >= 0; i--)) {
        do_run "${post_hooks[i]}"
    }
}
trap atexit EXIT
run_atexit() {
    post_hooks+=("$*")
}

# do_event 'kmem:mm_page_alloc'
do_event() {
    for e in "$@"; do
        local ename="${e//://}"
        do_run "echo 1 > $tracefs/events/$ename/enable"
        run_atexit "echo 0 > $tracefs/events/$ename/enable"
    done
}

# do_kprobe
# p:myopen:do_sys_open filename=+0(%si):string
do_kprobe() {
    local kprobe
    for k in "$@"; do
       IFS=":" read -r -a kprobe <<< "$k"
       do_run "echo '${kprobe[0]}:${kprobe[1]} ${kprobe[2]}' >> '$tracefs/kprobe_events'"
       run_atexit "echo -:${kprobe[1]} >> $tracefs/kprobe_events"
    done
}

# do_kprobe_enabled
# p:do_sys_open filename=+0(%si):string
# p:myopen:do_sys_open filename=+0(%si):string
do_kprobe_enabled() {
    local kprobe
    for k in "$@"; do
        IFS=":" read -r -a kprobe <<< "$k"
        (( ${#kprobe[@]} == 2 )) && kprobe=("${kprobe[0]}" "${kprobe[2]%% *}" "${kprobe[2]:1}")
        (( ${#kprobe[@]} != 3 )) && err "kprobe err: $1"
        do_kprobe "$(join ':' "${kprobe[@]}")"
        do_event "kprobes:${kprobe[1]}"
    done
}

# do_uprobe
# p:bash:/bin/bash:0x4245c0
do_uprobe() {
    local uprobe
    for u in "$@"; do
        IFS=":" read -r -a uprobe <<< "$u"
        [[ "${uprobe[3]}" != 0x* ]] && uprobe[3]=$(get_addr "${uprobe[2]}" "${uprobe[3]}")
        do_run "echo '${uprobe[0]}:${uprobe[1]} ${uprobe[2]}:${uprobe[3]}' >> $tracefs/uprobe_events"
        run_atexit "echo -:${uprobe[1]} >> $tracefs/uprobe_events"
    done
}

# do_uprobe_enabled
# p:/bin/bash:0x4245c0
# p:bash:/bin/bash:0x4245c0
do_uprobe_enabled() {
    local uprobe
    for u in "$@"; do
        IFS=":" read -r -a uprobe <<< "$u"
        (( ${#uprobe[@]} == 3 )) && uprobe=("${uprobe[0]}" "${uprobe[1]##*/}_${uprobe[2]}" "${uprobe[@]:1}")
        (( ${#uprobe[@]} != 4 )) && err "uprobe err: $1"
        do_uprobe "$(join ':' "${uprobe[@]}")"
        do_event "uprobes:${uprobe[1]}"
    done
}

main() {
    local opt_duration=
    local opt_stacktrace=
    while getopts 'd:s' opt; do
        case $opt in
            d)  opt_duration="$OPTARG";;
            s)  opt_stacktrace=1;;
            ?)  err "undefined opt: $opt";
        esac
    done
    shift $((OPTIND - 1))

    do_main "$@"

    if [[ -n "$opt_stacktrace" ]]; then
        echo 1 > $tracefs/options/stacktrace
        run_atexit "echo 0 > $tracefs/options/stacktrace"
    fi

    echo 1 > "$tracefs/tracing_on"
    run_atexit "echo 0 > $tracefs/tracing_on"

    if [ -n "$opt_duration" ]; then
        run_atexit "cat $tracefs/trace"
        sleep "$opt_duration"
    else
        cat "$tracefs/trace_pipe"
    fi
}
